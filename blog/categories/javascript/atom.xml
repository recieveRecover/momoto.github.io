<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JavaScript | momoto.github.io]]></title>
  <link href="http://momoto.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://momoto.github.io/"/>
  <updated>2013-12-15T07:00:11+09:00</updated>
  <id>http://momoto.github.io/</id>
  <author>
    <name><![CDATA[Seiji Momoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[getEqualSumSubstring関数の問題を考える]]></title>
    <link href="http://momoto.github.io/blog/2013/06/30/finding-the-longest-contiguous-equal-sum-substring-of-length-2n/"/>
    <updated>2013-06-30T00:00:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/06/30/finding-the-longest-contiguous-equal-sum-substring-of-length-2n</id>
    <content type="html"><![CDATA[<p>　getEqualSumSubstring関数の問題を考えてみます。この問題の出典についてはわかりませんが、Stack Overflowには同問題に関する質問がいくつか寄せられているように、プログラミングの分野では有名な問題であるようです。</p>

<p>　問題文を日本語に訳してみると、だいたい次のような内容です。</p>

<blockquote><p>　0以外の数字だけを含む文字列sを引数にとるgetEqualSumSubstring関数を定義します。<br>
　この関数はsの連続する部分列のうち、長さは2*Nで、左側N個の数字の合計と右側N個の数字の合計が等しくなるような最も長い部分列の長さを表示します。<br>
　適当な部分列がない場合には0と表示します。</p>

<p><a href="http://stackoverflow.com/questions/8469407/to-find-the-longest-substring-with-equal-sum-in-left-and-right-in-c">To find the longest substring with equal sum in left and right in C++ &ndash; Stack Overflow</a></p></blockquote>

<!-- more -->


<h4>入力例＃１</h4>

<p>　入力された文字列が123231であるとき、連続する最も長い部分列は123231で、出力する部分列の長さは6です。</p>

<h4>入力例＃２</h4>

<p>　入力された文字列が986561517416921217551395112859219257312であるとき、連続する最も長い部分列は656151741692121755139511285921925731で、出力する部分列の長さは36です。</p>

<h3>解答例</h3>

<p>　JavaScriptの解答例です。順を追って問題を理解するためにも、文字列sから適当な部分列を抜き出す処理と、抜き出した部分列から適当な部分列を探す処理とで分けて考えてみます。</p>

<p>```
function getEqualSumSubstring(s) {
  var substrings = [], longest = &ldquo;&rdquo;;</p>

<p>  for (var begin=0; begin&lt;s.length; begin++)</p>

<pre><code>for (var end=begin+2; end&lt;=s.length; end=end+2)
  substrings[substrings.length] = s.slice(begin, end);
</code></pre>

<p>  for (var i in substrings)</p>

<pre><code>if (substrings[i].length &lt;= longest.length)
  continue;
else if ((function (s) {
  var begin=0, end=s.length/2, left=0, right=0;
  for (begin; begin&lt;end; begin++) {
    left  += parseInt(s[begin]);
    right += parseInt(s[end + begin]);
  }
  return (left === right);
})(substrings[i]))
  longest = substrings[i];
</code></pre>

<p>  return longest.length;
}
```</p>

<p>　まず、出力するべき部分列の長さは偶数であることが問題文からわかるので、長さが偶数になる部分列だけをsから抜き出して配列に格納しておきます。
このときに抜き出す部分列の個数は<code>floor((sの長さ+1)/2) * floor(sの長さ/2)</code>となればよさそうです。
次に、部分列の左側半分の数字の合計と右側半分の数字の合計が等しくなるような部分列の最も長いものを配列から探して、その長さを出力します。</p>

<h4>別解</h4>

<p>　上記の解答例は、文字列sの一文字目から部分列が短い順に適当な部分列を探しているので、この点にリファクタリングの余地がありそうです。
最も長い部分列を効率よく見つけるために、部分列が長い順に適当な部分列を探すように改善を考えてみます。</p>

<p>```
function getEqualSumSubstring(s) {
  var substring=&ldquo;&rdquo;;</p>

<p>  for (var end=s.length-s.length%2; end>0; end=end-2)</p>

<pre><code>for (var begin=0; s.length&gt;=(begin+end); begin++)
  if ((function (s) {
    var begin=0, end=s.length/2, left=0, right=0;
    for (begin; begin&lt;end; begin++) {
      left  += parseInt(s[begin]);
      right += parseInt(s[end + begin]);
    }
    return (left === right);
  })(substring = s.slice(begin, (end+begin))))
    return substring.length;
</code></pre>

<p>  return 0;
}
```</p>

<p>　この別解では、部分列が長い順に適当な部分列を探しているので、候補の部分列を配列に格納する必要がなくなりました。部分列の左右の和が等しいかどうかを調べる部分は変更していません。</p>

<h4>実装</h4>

<p>　上記の解答例にHTMLのユーザインタフェースを加えた実装例です。</p>

<p><form id="finding-the-longest-contiguous-equal-sum-substring-of-length-2n">
<label>入力 <textarea rows="4" style="width: 100%;"></textarea></label>
<label>出力 <output><textarea rows="4" style="width: 100%;" readonly=True></textarea></output></label></p>

<script> (function(){

function getEqualSumSubstring(s) {
  var substring="";

  for (var end=s.length-s.length%2; end>0; end=end-2)
    for (var begin=0; s.length>=(begin+end); begin++)
      if ((function (s) {
        var begin=0, end=s.length/2, left=0, right=0;
        for (begin; begin<end; begin++) {
          left  += parseInt(s[begin]);
          right += parseInt(s[end + begin]);
        }
        return (left === right);
      })(substring = s.slice(begin, (end+begin))))
        return substring.length;

  return 0;
}

function eventhandler(event) {
  if (text === i.value && event.type !== "change") return;
  else o.value = getEqualSumSubstring(text = i.value);
}
var text = "";
var f = document.getElementById("finding-the-longest-contiguous-equal-sum-substring-of-length-2n");
var i = f.getElementsByTagName("textarea")[0];
var o = f.getElementsByTagName("textarea")[1];
i.onkeydown = eventhandler;
i.onkeyup   = eventhandler;
})(); </script>


<p></form></p>

<h3>参考</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/8469407/to-find-the-longest-substring-with-equal-sum-in-left-and-right-in-c">To find the longest substring with equal sum in left and right in C++ &ndash; Stack Overflow</a></li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.slice &ndash; JavaScript | MDN</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テキストを文字参照記述へ変換する]]></title>
    <link href="http://momoto.github.io/blog/2012/08/11/converting-text-to-character-references/"/>
    <updated>2012-08-11T00:00:00+09:00</updated>
    <id>http://momoto.github.io/blog/2012/08/11/converting-text-to-character-references</id>
    <content type="html"><![CDATA[<p>　入力された文字列の符号位置（Unicode）を出力します。テキストをHTML数値文字参照に変換するように動作します。</p>

<!-- more -->


<p><form id="convert-text-to-character-references">
<label>形式 <select><option>HTML文字参照（10進数）</option><option>HTML文字参照（16進数）</option><option>符号位置のみ（10進数）</option><option>符号位置のみ（16進数）</option></select></label><br>
<label>入力 <textarea rows="4" style="width: 100%;"></textarea></label>
<label>出力 <output><textarea rows="4" style="width: 100%;" readonly=True></textarea></output></label></p>

<script> (function(){
function decimal_form(codepoint) { return "&#" + codepoint.toString(10) + ";"; }
function hexadecimal_form(codepoint) { return "&#x" + codepoint.toString(16) + ";"; }
function decimal_delimit_space(codepoint) { return codepoint.toString(10) + " "; }
function hexadecimal_delimit_space(codepoint) { return codepoint.toString(16) + " "; }
function convert_text_to_character_references(text) {
  for (var encoded="", i=0; i<text.length; i++)
    if (s.selectedIndex === 0) encoded += decimal_form(text.charCodeAt(i));
    else if (s.selectedIndex === 1) encoded += hexadecimal_form(text.charCodeAt(i));
    else if (s.selectedIndex === 2) encoded += decimal_delimit_space(text.charCodeAt(i));
    else if (s.selectedIndex === 3) encoded += hexadecimal_delimit_space(text.charCodeAt(i));
  o.value = encoded;
}
function eventhandler(event) {
  if (text === i.value && event.type !== "change")
    return;
  else
    convert_text_to_character_references(text = i.value);
}
var text = "";
var f = document.getElementById("convert-text-to-character-references");
var s = f.getElementsByTagName("select")[0];
var i = f.getElementsByTagName("textarea")[0];
var o = f.getElementsByTagName("textarea")[1];
i.onkeydown = eventhandler;
i.onkeyup   = eventhandler;
s.onchange  = eventhandler;
})(); </script>


<p></form></p>

<h3>参考</h3>

<ul>
<li><a href="http://www.unicode.org/Public/UCD/latest/ucd/">The Unicode Character Database (UCD)</a></li>
<li><a href="http://www.ietf.org/rfc/rfc1815.txt">RFC 1815 &ndash; Character Sets ISO-10646 and ISO-10646-J-1</a></li>
<li><a href="http://www.w3.org/TR/html5/syntax.html#character-references">8.1.4 Character references — HTML5</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
