<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[仮想化 | momoto.github.io]]></title>
  <link href="http://momoto.github.io/blog/categories/jia-xiang-hua/atom.xml" rel="self"/>
  <link href="http://momoto.github.io/"/>
  <updated>2013-10-31T22:03:59+09:00</updated>
  <id>http://momoto.github.io/</id>
  <author>
    <name><![CDATA[Seiji Momoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrantをつかって仮想マシンを管理する]]></title>
    <link href="http://momoto.github.io/blog/2013/08/28/guide-to-managing-guests-using-vagrant/"/>
    <updated>2013-08-28T21:41:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/08/28/guide-to-managing-guests-using-vagrant</id>
    <content type="html"><![CDATA[<p>　Vagrantをつかって仮想マシンを管理する手引きです。Vagrantを利用するにはVirtualBoxやAWSなどのプロバイダを利用できる状態である必要があります。</p>

<!-- more -->


<ol>
<li><h3>試してみる</h3>

<p>　<a href="http://www.vagrantbox.es/">Vagrantbox.es</a>で紹介されているBoxファイルから仮想マシンを新しく作成します。
Boxファイルは次のウェブサイトでも公開されています。</p>

<ul>
<li><a href="http://www.vagrantup.com/">vagrantup.com</a>

<ul>
<li><a href="http://files.vagrantup.com/precise64.box">Ubuntu 12.04 precise 64-bit</a> (323MB)</li>
<li><a href="http://files.vagrantup.com/precise32.box">Ubuntu 12.04 precise 32-bit</a> (299MB)</li>
</ul>
</li>
<li><a href="http://cloud-images.ubuntu.com/">Ubuntu Cloud Images</a>

<ul>
<li><a href="http://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-amd64-vagrant-disk1.box">Ubuntu 13.10 saucy 64-bit</a> (324MB)</li>
<li><a href="http://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-i386-vagrant-disk1.box">Ubuntu 13.10 saucy 32-bit</a> (324MB)</li>
</ul>
</li>
<li><a href="http://nrel.github.io/vagrant-boxes/">米エネルギー省 国立再生可能エネルギー研究所（NREL）GitHub</a>

<ul>
<li><a href="http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20130731.box">CentOS 6.4 x86_64</a> (494MB)</li>
<li><a href="http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-i386-v20130731.box">CentOS 6.4 i386</a> (459MB)</li>
</ul>
</li>
</ul>


<p>　例えばFedora 18 x86 MinimalのBoxファイルをつかう場合、次のように<code>vagrant init [box-name] [box-url]</code>を実行して、Vagrantのプロジェクトを開始します。</p>

<pre><code>$ mkdir vagrant-fedora-18
$ cd vagrant-fedora-18/
$ vagrant init fedora-18 http://static.stasiak.at/fedora-18-x86-2.box
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
</code></pre>

<p>　次に<code>vagrant up [vm-name]</code>を実行して、作成したVagrantのプロジェクトから仮想マシンを起動します。</p>

<pre><code>vagrant-fedora-18 $ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
[default] Box 'fedora-18' was not found. Fetching box from specified URL for
the provider 'virtualbox'. Note that if the URL does not have
a box for this provider, you should interrupt Vagrant now and add
the box yourself. Otherwise Vagrant will attempt to download the
full box prior to discovering this error.
Downloading or copying the box...
Extracting box...te: 456k/s, Estimated time remaining: 0:00:01))
Successfully added box 'fedora-18' with provider 'virtualbox'!
[default] Importing base box 'fedora-18'...
[default] Matching MAC address for NAT networking...
[default] Setting the name of the VM...
[default] Clearing any previously set forwarded ports...
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Forwarding ports...
[default] -- 22 =&gt; 2222 (adapter 1)
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Mounting shared folders...
[default] -- /vagrant
</code></pre>

<p>　仮想マシンの状態は<code>vagrant status</code>やプロバイダのユーザインタフェースから確かめることができます。</p>

<pre><code>vagrant-fedora-18 $ vagrant status
Current machine states:

default                   running (virtualbox)
</code></pre>

<p><img src="/blog/images/2013-08-30-guide-to-managing-guests-using-vagrant/01-verify-the-vm-booted-by-looking-at-the-virtualbox.png" width="600" title="VirtualBoxのGUIから仮想マシンの動作を確認する" ></p>

<p>　起動している仮想マシンへSSH接続するには<code>vagrant ssh</code>を実行します。</p>

<pre><code>$ vagrant ssh
[vagrant@localhost ~]$
[vagrant@localhost ~]$ cat /etc/fedora-release
Fedora release 18 (Spherical Cow)
</code></pre></li>
<li><h3>Boxを管理する</h3>

<ul>
<li>Boxの一覧 <code>vagrant box list</code></li>
<li>Boxの追加 <code>vagrant box add &lt;name&gt; &lt;url&gt;</code>（VagrantfileをつくらずにBoxの追加だけを行います）</li>
<li>Boxの削除 <code>vagrant box remove &lt;name&gt;</code></li>
</ul>


<p>　仮想マシンからBoxファイルを作成するには<code>vagrant package</code>をつかいます。
Boxファイルは仮想マシンディスクイメージ（VMDK）、OVFファイル、そしてVagrantfile等をTAR形式でまとめたものであるようです。</p>

<pre><code>$ vagrant package
[default] Attempting graceful shutdown of VM...
[default] Clearing any previously set forwarded ports...
[default] Creating temporary directory for export...
[default] Exporting VM...
[default] Compressing package to: vagrant-fedora-18/package.box
</code></pre></li>
<li><h3>仮想マシンを管理する</h3>

<p>　Vagrantのプロジェクトディレクトリ内から、ゲストOSの起動や停止などを操作できます。</p>

<ul>
<li>仮想マシンの起動 <code>vagrant up</code></li>
<li>仮想マシンの停止 <code>vagrant halt</code></li>
<li>仮想マシンの再起動 <code>vagrant reload</code></li>
<li>仮想マシンの一時停止 <code>vagrant suspend</code></li>
<li>仮想マシンの再開 <code>vagrant resume</code></li>
<li>仮想マシンへSSH接続 <code>vagrant ssh</code></li>
</ul>


<p>　仮想マシンの状態を確認するには<code>vagrant status</code>を実行します。</p>

<pre><code>$ vagrant status
Current machine states:

default                   running (virtualbox)
</code></pre></li>
<li><h3>MULTI-MACHINEを利用する</h3>

<p>　複数の仮想マシンをコントロールできるMULTI-MACHINE環境を利用するには、Vagrantfileに仮想マシンの情報を定義します。
例えば、仮想マシンを２つ、異なるホスト名とBoxで定義する場合、Vagrantfileの<code>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| ... end</code>の間に、次のように記述します。</p>

<pre><code>config.vm.define :node1 do |node1_config|
  node1_config.vm.hostname = "node1"
end
config.vm.define :node2 do |node2_config|
  node2_config.vm.box = "centos-6.3"
  node2_config.vm.hostname = "node2"
end
</code></pre>

<p>　上のようにVagrantfileを書き換えたあと<code>vagrant up</code>を実行してみると、ゲストのFedoraとCentOSが同時に起動します。</p>

<pre><code>$ vagrant up

Bringing machine 'node1' up with 'virtualbox' provider...
Bringing machine 'node2' up with 'virtualbox' provider...
[node1] Importing base box 'fedora-18'...
[node1] Matching MAC address for NAT networking...
[node1] Setting the name of the VM...
[node1] Clearing any previously set forwarded ports...
[node1] Creating shared folders metadata...
[node1] Clearing any previously set network interfaces...
[node1] Preparing network interfaces based on configuration...
[node1] Forwarding ports...
[node1] -- 22 =&gt; 2222 (adapter 1)
[node1] Booting VM...
[node1] Waiting for VM to boot. This can take a few minutes.
[node1] VM booted and ready for use!
[node1] Setting hostname...
[node1] Mounting shared folders...
[node1] -- /vagrant
[node2] Importing base box 'centos-6.3'...
[node2] Matching MAC address for NAT networking...
[node2] Setting the name of the VM...
[node2] Clearing any previously set forwarded ports...
[node2] Fixed port collision for 22 =&gt; 2222. Now on port 2200.
[node2] Creating shared folders metadata...
[node2] Clearing any previously set network interfaces...
[node2] Preparing network interfaces based on configuration...
[node2] Forwarding ports...
[node2] -- 22 =&gt; 2200 (adapter 1)
[node2] Booting VM...
[node2] Waiting for VM to boot. This can take a few minutes.
[node2] VM booted and ready for use!
[node2] Setting hostname...
[node2] Mounting shared folders...
[node2] -- /vagrant

$ vagrant status
Current machine states:

node1                     running (virtualbox)
node2                     running (virtualbox)
</code></pre>

<p><img src="/blog/images/2013-08-30-guide-to-managing-guests-using-vagrant/02-multi-machine.png" width="600" title="VirtualBoxからMULTI-MACHINEの動作を確認する" ></p>

<p>　Vagrantfileにはホスト名以外にも細かく設定を記述することができます。詳しい設定項目については<a href="http://docs.vagrantup.com/v2/vagrantfile/index.html">Documentation</a>を参照してください。</p></li>
</ol>


<h2>参考</h2>

<ul>
<li><a href="http://docs.vagrantup.com/v2">Vagrant Documentation</a></li>
</ul>


<h2>関連記事</h2>

<ul>
<li><a href="/blog/2013/08/17/guide-to-managing-guests-using-virsh/">Virshをつかって仮想マシンを管理する</a></li>
<li><a href="/blog/2013/08/11/guide-to-creating-virtual-machine-with-qemu/">QEMUをつかって仮想マシンを作成する</a></li>
</ul>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_top&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=seijimomotobl-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4798121401" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_top&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=seijimomotobl-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=477415038X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_top&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=seijimomotobl-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4822262731" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virshをつかって仮想マシンを管理する]]></title>
    <link href="http://momoto.github.io/blog/2013/08/17/guide-to-managing-guests-using-virsh/"/>
    <updated>2013-08-17T15:51:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/08/17/guide-to-managing-guests-using-virsh</id>
    <content type="html"><![CDATA[<p>　libvirtのコマンドラインツールであるvirshをつかって、仮想マシンを管理する手引きです。virt-installなどで作成した仮想マシンの起動、停止、接続などの操作を行います。</p>

<!-- more -->


<h3>仮想マシンの一覧</h3>

<p>　virt-manager（virt-installを含む）で作成した仮想マシンや、XMLファイルから定義した仮想マシンの一覧を表示します。
オプションを何も付けない場合、シャットオフ状態の仮想マシンは一覧に表示されないので、状態に依らずすべての一覧を得るには<code>--all</code>のオプションを付けます。
他のユーザが作成した仮想マシンも一覧には表示されません。</p>

<pre><code>$ virsh list --all
 Id    名前                         状態
----------------------------------------------------
 -     ubuntu-13.04                   シャットオフ
 6     centos-6.4                     実行中
</code></pre>

<h3>仮想マシンの起動</h3>

<p>　定義済みの仮想マシン（libvirtに認識されていてlistに現れる仮想マシン）を起動する場合、<code>virsh start &lt;仮想マシンの名前&gt;</code>のコマンドを使います。</p>

<pre><code>$ virsh start ubuntu-13.04
ドメイン ubuntu-13.04 が起動されました
</code></pre>

<p>　未定義の仮想マシンをXMLファイルから定義して、起動する場合、<code>virsh create &lt;XMLファイル&gt;</code>のコマンドを使います。</p>

<pre><code>$ virsh create centos-6.4.backup.xml
ドメイン centos-6.4 が centos-6.4.backup.xml から作成されました
</code></pre>

<h3>仮想マシンのコンソールへ接続する</h3>

<p>　実行中の仮想マシンのシリアルポートへコンソール接続するには<code>virsh console &lt;仮想マシンのIDまたは名前&gt;</code>をつかいます。</p>

<pre><code>$ virsh console 6
ドメイン centos-6.4 に接続しました
エスケープ文字は ^] です

CentOS release 6.4 (Final)
Kernel 2.6.32-358.el6.x86_64 on an x86_64

localhost.localdomain login: 
</code></pre>

<p>　コンソールへ接続するには、仮想マシンのXMLファイルにシリアルデバイスが定義されていること（ホスト側）と、シリアルポートによる接続が許可されていること（ゲスト側）が必要です。</p>

<ul>
<li>参考

<ul>
<li><a href="http://lost-and-found-narihiro.blogspot.jp/2010/10/kvm-virsh-guest-os-centos.html">lost and found ( for me ? ): KVM: virsh コンソール接続&#12288;( guest OS CentOS )</a></li>
<li><a href="http://lost-and-found-narihiro.blogspot.jp/2010/10/kvm-virsh-guest-os-ubuntu_18.html">lost and found ( for me ? ): KVM: virsh コンソール接続&#12288;( guest OS Ubuntu )</a></li>
</ul>
</li>
</ul>


<h3>一時停止と再開</h3>

<pre><code>$ virsh suspend 5
ドメイン 5 は一時停止されました

$ virsh resume 5
ドメイン 5 が再開されました
</code></pre>

<h3>停止する</h3>

<p>　ホスト側から仮想マシンを停止させるには<code>virsh shutdown</code>または<code>virsh destroy</code>をつかいます。</p>

<pre><code>$ virsh shutdown 6
ドメイン 6 はシャットダウン中です

$ virsh destroy 6
ドメイン 6 は強制停止されました
</code></pre>

<h3>定義と定義の解除</h3>

<p>　仮想マシンの定義を消すには<code>virsh undefine &lt;仮想マシンの名前&gt;</code>をつかいます。</p>

<pre><code>$ virsh undefine ubuntu-13.04
ドメイン ubuntu-13.04 の定義が削除されました
</code></pre>

<p>　XMLファイルから仮想マシンを定義するには<code>virsh define &lt;XMLファイル&gt;</code>をつかいます。</p>

<pre><code>$ virsh define ubuntu-13.04.backup.xml
ドメイン ubuntu-13.04 が ubuntu-13.04.backup.xml から定義されました
</code></pre>

<p>　定義済みの仮想マシンの情報をXML形式で出力するには<code>virsh dumpxml &lt;仮想マシンのIDまたは名前&gt;</code>をつかいます。</p>

<pre><code>$ virsh dumpxml ubuntu-13.04 &gt; ubuntu-13.04.backup.xml
</code></pre>

<h3>参考</h3>

<ul>
<li><a href="http://libvirt.org/sources/virshcmdref/html-single/">Virsh Command Reference</a></li>
<li><a href="https://access.redhat.com/site/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Virtualization_Administration_Guide/chap-Virtualization_Administration_Guide-Managing_guests_with_virsh.html">&#31532;14&#31456; virsh &#12434;&#20351;&#12387;&#12390;&#12466;&#12473;&#12488;&#12434;&#31649;&#29702;&#12377;&#12427; &ndash; Red Hat Customer Portal</a></li>
<li><a href="http://docs.fedoraproject.org/ja-JP/Fedora/13/html/Virtualization_Guide/chap-Virtualization-Managing_guests_with_virsh.html">第28章 Managing guests with virsh</a></li>
<li><a href="http://opensuse-man-ja.berlios.de/opensuse-html/bk05pt02.html">openSUSE 12.3: パート II. libvirt を利用した仮想マシンの管理</a></li>
<li><a href="https://help.ubuntu.com/community/KVM/Managing">KVM/Managing &ndash; Community Ubuntu Documentation</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Libvirt">libvirt &ndash; ArchWiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QEMUをつかって仮想マシンを作成する]]></title>
    <link href="http://momoto.github.io/blog/2013/08/11/guide-to-creating-virtual-machine-with-qemu/"/>
    <updated>2013-08-11T14:54:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/08/11/guide-to-creating-virtual-machine-with-qemu</id>
    <content type="html"><![CDATA[<p>　QEMUをつかって仮想マシンを作成する手引きです。ホスト側に仮想化機能が備わっていることを確かめたあと、QEMUをつかってゲストOSを構築します。</p>

<!-- more -->


<h2>仮想化機能を確かめる</h2>

<p>　ホストとなるGNU/Linuxシステムで、CPUのハードウェア仮想化支援機能とLinux KVMのサポートを確かめます。</p>

<ol>
<li><h3>ハードウェアサポートを確かめる</h3>

<p>　lscpuの仮想化（Virtualization）の行、または/proc/cpuinfoのflagsの行から、ハードウェア仮想化支援機能（Hardware-Assisted Virtualization）を確認します。
この機能はベンダーごとに実装が異なるので、インテル製品であればVT-xを、AMD製品であればAMD-Vを確かめます。</p>

<pre><code>$ lscpu | grep -Ei "(vt-x|amd-v)"
仮想化:             AMD-V
</code></pre>

<p>　/proc/cpuinfoでは、VT-xの動作モード VMX、または、AMD-VのSecure virtual machine（svm）を確かめます。</p>

<pre><code>$ grep -E "(vmx|svm)" /proc/cpuinfo
flags : ... svm ... svm_lock ...
</code></pre></li>
<li><h3>カーネルサポートを確かめる</h3>

<p>Linux KVMカーネルモジュールが有効になっていることを確認します。/proc/config.gzまたはlsmodから確かめます。</p>

<pre><code>$ zgrep -E "KVM|VIRTUALIZATION" /proc/config.gz
CONFIG_KVM_GUEST=y
CONFIG_HAVE_KVM=y
CONFIG_HAVE_KVM_IRQCHIP=y
CONFIG_HAVE_KVM_IRQ_ROUTING=y
CONFIG_HAVE_KVM_EVENTFD=y
CONFIG_KVM_APIC_ARCHITECTURE=y
CONFIG_KVM_MMIO=y
CONFIG_KVM_ASYNC_PF=y
CONFIG_HAVE_KVM_MSI=y
CONFIG_HAVE_KVM_CPU_RELAX_INTERCEPT=y
CONFIG_VIRTUALIZATION=y
CONFIG_KVM=m
CONFIG_KVM_INTEL=m
CONFIG_KVM_AMD=m
CONFIG_KVM_MMU_AUDIT=y
CONFIG_KVM_DEVICE_ASSIGNMENT=y

$ lsmod | grep kvm
kvm_amd                52151  0
kvm                   376394  1 kvm_amd
</code></pre>

<p>　また、ユーザは/dev/kvmへアクセスできる権限が必要です。Arch Linuxではkvmグループが用意されているので、ハイパーバイザを利用するユーザをこのグループに追加します。</p>

<pre><code>$ sudo gpasswd -a $(whoami) kvm
</code></pre></li>
</ol>


<h2>ゲストOSを構築する</h2>

<ol>
<li><h3>仮想ディスクイメージを作る</h3>

<p>　qemu-imgをつかって、ゲストOSのディスクイメージを作ります。
オプションとして、ディスクイメージのファイル形式、ファイル名、サイズを指定します。qcow2はQEMUでつかわれるイメージファイル形式です。</p>

<pre><code>$ qemu-img create -f qcow2 ~/Workspace/CentOS-6.4-x86_64-netinstall.qcow2 8G
Formatting '/home/guest/Workspace/CentOS-6.4-x86_64-netinstall.qcow2', fmt=qcow2 size=8589934592 encryption=off cluster_size=65536 lazy_refcounts=off
</code></pre></li>
<li><h3>ゲストOSをインストールする</h3>

<p>　ゲストOSをインストールするために、qemu-system-&lt;architecture&gt;をつかって仮想マシンを起動します。
このときのオプションには、OSインストールの方法にしたがって適当なオプションを付ける必要があります。
インストールメディアをCentOS-6.4-x86_64-netinstall.isoとして、光学ドライブから起動させる場合は<code>-boot order=d</code>と<code>-cdrom &lt;file&gt;</code>のオプションを付けます。</p>

<pre><code>$ qemu-system-x86_64 \
-enable-kvm \
-m 512 \
-boot order=d \
-cdrom ~/Downloads/CentOS-6.4-x86_64-netinstall.iso \
~/Workspace/CentOS-6.4-x86_64-netinstall.qcow2
</code></pre>

<p><a href="/blog/images/2013-08-11-guide-to-creating-virtual-machine-with-qemu/installing-centos-6-4-as-a-guest-os.png"><img src="/blog/images/2013-08-11-guide-to-creating-virtual-machine-with-qemu/installing-centos-6-4-as-a-guest-os.thumbnail.png" alt="Cent OS 6.4をゲストOSとしてインストールする" /></a></p>

<ul>
<li>　<code>failed to initialize KVM: Device or resource busy</code> とでて先にすすめない場合は、ホスト側で別のハイパーバイザが起動していないか確認してください。</li>
<li>　ゲスト側で <code>Trying to unpack rootfs image as initramfs</code> とでるところで起動がとまってしまう場合は、ゲストOSに必要なメモリが足りていないようです。
QEMUの<code>-m</code>オプションの値を引き上げて試してみてください。</li>
</ul>


<p>　インストール後はインストールメディアのオプションを外して仮想マシンを起動します。</p>

<pre><code>$ qemu-system-x86_64 \
-enable-kvm \
-m 512 \
~/Workspace/CentOS-6.4-x86_64-netinstall.qcow2
</code></pre>

<p><a href="/blog/images/2013-08-11-guide-to-creating-virtual-machine-with-qemu/booting-guest-os.png"><img src="/blog/images/2013-08-11-guide-to-creating-virtual-machine-with-qemu/booting-guest-os.thumbnail.png" alt="ゲストOSの起動" /></a></p></li>
</ol>


<h2>参考</h2>

<ul>
<li><a href="http://wiki.qemu.org/Main_Page">QEMU</a></li>
<li><a href="https://people.gnome.org/~markmc/qcow-image-format.html">The QCOW2 Image Format</a></li>
</ul>


<h3>関連記事</h3>

<ul>
<li><a href="/blog/2013/04/06/install-centos-6-dot-4-i386-netinstall/">CentOS 6.4をインストールする</a></li>
<li><a href="/blog/2013/06/23/install-debian-7-dot-1-0-amd64-netinst/">Debian 7.1.0をインストールする</a></li>
<li><a href="/blog/2013/03/16/install-x86-minimal-20121213/">Gentoo Linuxをインストールする</a></li>
<li><a href="/blog/2013/01/05/install-arch-linux/">Arch Linux 2012.12.01をインストールする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[libvirtを用いて仮想マシンを構築、インストールする]]></title>
    <link href="http://momoto.github.io/blog/2012/08/04/build-and-install-libvirt-based-virtual-machine/"/>
    <updated>2012-08-04T09:49:00+09:00</updated>
    <id>http://momoto.github.io/blog/2012/08/04/build-and-install-libvirt-based-virtual-machine</id>
    <content type="html"><![CDATA[<p>virt-installを使って、CUIから仮想マシンのディスクイメージを作成する。</p>

<p>動作要件として、ホストOSにハイパーバイザ（KVMやXen）とlibvirtがインストールされていて、libvirtdが起動している必要がある。
virt-install自体は、RPMでは"python-virtinst"パッケージに含まれている。
（参考：<a href="http://rpmfind.net/linux/rpm2html/search.php?query=virt-install">RPM resource virt-install</a>）</p>

<!-- more -->


<p>virt-installのオプションには仮想マシンに割り当てるリソースなどを指定する。
例えば、仮想マシン名は「myvirtualmachine」、インストールイメージにはkddilabs.jpのミラーが配布しているCentOS6.3[x86_64]を
指定した準仮想化ゲストOSを/var/lib/libvirt/images/myvirtualmachine.imgに作成する場合は下のようなオプションになる。</p>

<p>```</p>

<h1>virt-install \</h1>

<p>&mdash;name=myvirtualmachine \
&mdash;ram=512 \
&mdash;vcpus=1 \
&mdash;paravirt \
&mdash;location=&lsquo;<a href="ftp://ftp.kddilabs.jp/Linux/packages/CentOS/6.3/os/x86_64/">ftp://ftp.kddilabs.jp/Linux/packages/CentOS/6.3/os/x86_64/</a>&rsquo; \
&mdash;file=/var/lib/libvirt/images/myvirtualmachine.img \
&mdash;file-size=8 \
&mdash;nographics \
&mdash;keymap=jp106
```</p>

<p>また、<code>--prompt</code>オプションを使うと対話的に各項目を指定することができる。</p>

<p>```</p>

<h1>virt-install &mdash;prompt</h1>

<p>  Would you like a fully virtualized guest (yes or no)? This will allow you to run unmodified operating systems.
  // 完全仮想化を行うかどうか（noで準仮想化）</p>

<pre><code>no
</code></pre>

<p>  What is the name of your virtual machine?
  // 仮想マシンの名称</p>

<pre><code>myvirtualmachine
</code></pre>

<p>  How much RAM should be allocated (in megabytes)?
  // 仮想マシンに割り当てるメインメモリの容量</p>

<pre><code>512
</code></pre>

<p>  What would you like to use as the disk (file path)?
  // イメージディスクのファイルパス</p>

<pre><code>/var/lib/libvirt/images/myvirtualmachine.img
</code></pre>

<p>  How large would you like the disk (/var/lib/xen/images/centos-6.3-x86_64.img) to be (in gigabytes)?
  // イメージディスクに割り当てる容量</p>

<pre><code>8
</code></pre>

<p>  Would you like to enable graphics support? (yes or no)
  // グラフィクスサポートを有効にするかどうか</p>

<pre><code>no
</code></pre>

<p>  What is the install CD-ROM/ISO or URL?
  // ISOイメージのファイルパス、または配布元のURL</p>

<pre><code>ftp://ftp.kddilabs.jp/Linux/packages/CentOS/6.3/os/x86_64/
</code></pre>

<p>```</p>

<p><code>--nographics</code>オプションを指定していれば、テキストユーザインタフェースでゲストOSのインストールが始まる。
ゲストOSとのコンソール接続を終了する場合は、'Ctrl + ]&lsquo;でホストOSへ戻ることができる。</p>

<h4>参考</h4>

<ul>
<li><a href="http://www.ibm.com/developerworks/jp/linux/library/l-libvirt/">libvirt 仮想化ライブラリーの徹底調査</a></li>
<li><a href="http://docs.redhat.com/docs/ja-JP/Red_Hat_Enterprise_Linux/5/html/Virtualization/chap-Virtualization-Virtualized_guest_installation_overview.html">第6章 仮想化ゲストインストールの概要</a></li>
<li><a href="http://www.atmarkit.co.jp/flinux/rensai/linuxkvm03/03a.html">libvirt探訪（基礎編） － ＠IT</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
