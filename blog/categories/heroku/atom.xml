<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Heroku | momoto.github.io]]></title>
  <link href="http://momoto.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://momoto.github.io/"/>
  <updated>2013-09-30T23:58:38+09:00</updated>
  <id>http://momoto.github.io/</id>
  <author>
    <name><![CDATA[Seiji Momoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HerokuにDjango 1.5.2を展開する]]></title>
    <link href="http://momoto.github.io/blog/2013/08/16/deploying-django-1-dot-5-2-on-heroku/"/>
    <updated>2013-08-16T00:00:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/08/16/deploying-django-1-dot-5-2-on-heroku</id>
    <content type="html"><![CDATA[<p>　Herokuが提供するPaaSにウェブアプリケーションフレームワーク Django 1.5.2を展開します。Pythonのバージョンは2.7を使用しています。<!-- more --></p>

<h4>1. django-toolbeltをインストールする</h4>

<p>　django-toolbeltをインストールするところからはじめていきます。ここまでにPythonとVirtualenvがインストールされている必要があります。</p>

<p>　まず、Python環境をつくるためのディレクトリを用意します。</p>

<p><code>
$ mkdir {application_root}
$ cd {application_root}/
</code></p>

<p>　<a href="https://pypi.python.org/pypi/virtualenv/1.10.1">virtualenv 1.10.1</a>をつかって、独立したPython環境を作成します。</p>

<p>```
$ virtualenv-2.7 venv &mdash;distribute</p>

<p>  New python executable in venv/bin/python2
  Also creating executable in venv/bin/python
  Installing Setuptools&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;.done.
  Installing Pip&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..done.</p>

<p>$ source venv/bin/activate
```</p>

<p>　<a href="https://pypi.python.org/pypi/pip/1.4.1">pip 1.4.1</a>をつかって<a href="https://pypi.python.org/pypi/django-toolbelt/0.0.1">django-toolbelt 0.0.1</a>をインストールします。</p>

<p>```
(venv) $ pip install django-toolbelt</p>

<p>  Successfully installed django-toolbelt django psycopg2 gunicorn dj-database-url dj-static static
  Cleaning up&hellip;</p>

<p>```</p>

<h4>2. Djangoプロジェクトを作成する</h4>

<p>　Herokuへ展開するDjangoのプロジェクトを作成していきます。この手順の中で、Herokuのプラットフォームでも動作するようにDjangoの設定を調整する必要があります。</p>

<p>　django-admin.pyをつかってプロジェクトを作成します。</p>

<p><code>
(venv) $ django-admin.py startproject {project_name} .
</code></p>

<p>　アプリケーションのルートディレクトリにProcfile、requirements.txt、.gitignoteを用意します。
<a href="https://devcenter.heroku.com/articles/procfile">Procfile</a>にはHerokuのdynosに実行させるコマンドを宣言します。
<a href="http://www.pip-installer.org/en/latest/requirements.html">requirements.txt</a>には必要なPythonパッケージを記述します。
<a href="http://git-scm.com/docs/gitignore">.gitignore</a>にはGitで追跡しないファイルを明示します。</p>

<p>```
(venv) $ vi Procfile</p>

<p>  web: gunicorn {project_name}.wsgi</p>

<p>(venv) $ pip freeze > requirements.txt</p>

<p>  Django==1.5.2
  dj-database-url==0.2.2
  dj-static==0.0.5
  django-toolbelt==0.0.1
  gunicorn==17.5
  psycopg2==2.5.1
  static==0.4
  wsgiref==0.1.2</p>

<p>(venv) $ vi .gitignore</p>

<p>  venv
  *.pyc
  staticfiles
```</p>

<p>　{project_name}/settings.py では、データベースURLやスタティックファイルへのパスを調整する必要があります。</p>

<p>```</p>

<h1>Parse database configuration from $DATABASE_URL</h1>

<p>import dj_database_url
DATABASES[&lsquo;default&rsquo;] =  dj_database_url.config()</p>

<h1>Honor the &lsquo;X-Forwarded-Proto&rsquo; header for request.is_secure()</h1>

<p>SECURE_PROXY_SSL_HEADER = (&lsquo;HTTP_X_FORWARDED_PROTO&rsquo;, &lsquo;https&rsquo;)</p>

<h1>Allow all host headers</h1>

<p>ALLOWED_HOSTS = [&lsquo;*&rsquo;]</p>

<h1>Static asset configuration</h1>

<p>import os
BASE_DIR = os.path.dirname(os.path.abspath(<strong>file</strong>))
STATIC_ROOT = &lsquo;staticfiles&rsquo;
STATIC_URL = &lsquo;/static/&rsquo;</p>

<p>STATICFILES_DIRS = (</p>

<pre><code>os.path.join(BASE_DIR, 'static'),
</code></pre>

<p>)</p>

<p>TEMPLATE_DIRS = (</p>

<pre><code>os.path.join(BASE_DIR, 'templates'),
</code></pre>

<p>)
```</p>

<p>　同様に、{project_name}/wsgi.py の内容も変更します。</p>

<p>```
from django.core.wsgi import get_wsgi_application
from dj_static import Cling</p>

<p>application = Cling(get_wsgi_application())
```</p>

<h4>3. Herokuへ展開する</h4>

<p>　作成したDjangoプロジェクトをHerokuへ展開していきます。GitやHeroku ToolbeltとHerokuユーザアカウントが必要です。</p>

<p>　Gitをつかってローカルリポジトリを作成します。</p>

<p>```
(venv) $ git init</p>

<p>  Initialized empty Git repository in ~/{application_root}/.git/</p>

<p>(venv) $ git add .
(venv) $ git commit -m &ldquo;Initial commit&rdquo;</p>

<p>  [master (root-commit) 691c642] Initial commit
   8 files changed, 254 insertions(+)
   create mode 100644 .gitignore
   create mode 100644 Procfile
   create mode 100644 requirements.txt
   &hellip;
```</p>

<p>　Heroku ToolbeltをつかってHeroku側でアプリケーションを作成します。</p>

<p>```
(venv) $ heroku create</p>

<p>  Creating {application_name}&hellip; done, stack is cedar
  <a href="http://">http://</a>{application_name}.herokuapp.com/ | git@heroku.com:{application_name}.git
  Git remote heroku added
```</p>

<p>　GitをつかってローカルリポジトリをHerokuプラットフォームへプッシュします。</p>

<p>```
(venv) $ git push heroku master</p>

<p>&mdash;&mdash;&ndash;> Python app detected
&mdash;&mdash;&ndash;> No runtime.txt provided; assuming python-2.7.4.
&mdash;&mdash;&ndash;> Preparing Python runtime (python-2.7.4)
&mdash;&mdash;&ndash;> Installing Distribute (0.6.36)
&mdash;&mdash;&ndash;> Installing Pip (1.3.1)
&mdash;&mdash;&ndash;> Installing dependencies using Pip (1.3.1)</p>

<pre><code>   Installing collected packages: Django, dj-database-url, dj-static, django-toolbelt, gunicorn, psycopg2, static
   Successfully installed Django dj-database-url dj-static django-toolbelt gunicorn psycopg2 static
     Cleaning up...
</code></pre>

<p>&mdash;&mdash;&ndash;> Discovering process types</p>

<pre><code>   Procfile declares types -&gt; web
</code></pre>

<p>&mdash;&mdash;&ndash;> Compiled slug size: 34.3MB
&mdash;&mdash;&ndash;> Launching&hellip; done, v5</p>

<pre><code>   http://{application_name}.herokuapp.com deployed to Heroku
</code></pre>

<p>```</p>

<p><img src="/blog/images/2013-08-16-deploying-django-1-dot-5-2-on-heroku/welcome-to-django.png" title="Welcome to Django" alt="Welcome to Django" /></p>

<h2>管理サイトを有効化する</h2>

<p>　管理サイトを有効化する場合は<code>INSTALLED_APPS</code>の<code>django.contrib.admin</code>の行をアンコメントします。INSTALLED_APPSは{project_name}/settings.pyに記述されています。</p>

<p>```
INSTALLED_APPS = (</p>

<pre><code>'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.sites',
'django.contrib.messages',
'django.contrib.staticfiles',
# Uncomment the next line to enable the admin:
'django.contrib.admin',
# Uncomment the next line to enable admin documentation:
'django.contrib.admindocs',
</code></pre>

<p>)
```</p>

<p>　同様に、<code>urlpatterns</code>の<code>url(r'^admin/', include(admin.site.urls))</code>の行をアンコメントします。urlpatternsは{project_name}/urls.pyに記述されています。</p>

<p>```</p>

<h1>Uncomment the next two lines to enable the admin:</h1>

<p>from django.contrib import admin
admin.autodiscover()</p>

<p>urlpatterns = patterns(&lsquo;&rsquo;,</p>

<pre><code># Uncomment the admin/doc line below to enable admin documentation:
url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

# Uncomment the next line to enable the admin:
url(r'^admin/', include(admin.site.urls)),
</code></pre>

<p>)
```</p>

<p>　INSTALLED_APPSを変更してHerokuへプッシュした後は、Herokuプラットフォーム側で<code>python manage.py syncdb</code>を実行する必要があります。
Herokuプラットフォーム側でコマンドを実行する場合は<code>heroku run</code>をつかいます。</p>

<p><code>``
(venv) $ heroku run python manage.py syncdb
Running</code>python manage.py syncdb` attached to terminal&hellip; up, run.4816
Creating tables &hellip;
Creating table auth_permission
Creating table auth_group_permissions
Creating table auth_group
Creating table auth_user_groups
Creating table auth_user_user_permissions
Creating table auth_user
Creating table django_content_type
Creating table django_session
Creating table django_site
Creating table django_admin_log</p>

<p>You just installed Django&rsquo;s auth system, which means you don&rsquo;t have any superusers defined.
&hellip;
Superuser created successfully.
Installing custom SQL &hellip;
Installing indexes &hellip;
Installed 0 object(s) from 0 fixture(s)
```</p>

<h2>参考</h2>

<ul>
<li><a href="https://devcenter.heroku.com/articles/django">Getting Started with Django on Heroku | Heroku Dev Center</a></li>
<li><a href="https://docs.djangoproject.com/en/1.5/intro/">Getting started | Django documentation | Django</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuにRedmine 2.3.1を展開する]]></title>
    <link href="http://momoto.github.io/blog/2013/05/31/deploy-redmine-2-dot-3-1-on-heroku/"/>
    <updated>2013-05-31T23:19:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/05/31/deploy-redmine-2-dot-3-1-on-heroku</id>
    <content type="html"><![CDATA[<p>　Herokuが提供するPaaSにプロジェクト管理ソフトウェア Redmine 2.3.1を展開します。
Redmineのバージョンは2.3.1、Rubyは1.9.2-p320、<a href="https://aur.archlinux.org/packages/heroku-client/">heroku-toolbelt</a>は2.39.4を使用しました。<!-- more --></p>

<h4>Redmine 2.3.1のダウンロード</h4>

<p>2013.05.31の時点で最新版である2.3.1をGitでクローンします。また、productionというブランチを作成し、チェックアウトします。</p>

<pre><code>$ git clone git://github.com/redmine/redmine.git

  Cloning into 'redmine'...
  remote: Counting objects: 101645, done.
  remote: Compressing objects: 100% (23821/23821), done.
  remote: Total 101645 (delta 79311), reused 98395 (delta 76195)
  Receiving objects: 100% (101645/101645), 25.39 MiB | 256.00 KiB/s, done.
  Resolving deltas: 100% (79311/79311), done.

$ cd redmine
$ git checkout -b production

  Switched to a new branch 'production'
</code></pre>

<h4>Rubyの確認</h4>

<p>ここではRubyのバージョン管理にrbenvを使用しています。また、インストールの過程でBundlerが必要になります。</p>

<pre><code>$ rbenv local 1.9.2-p320
$ ruby --version

  ruby 1.9.2p320 (2012-04-20 revision 35421) [x86_64-linux]

$ gem install bundler

  Successfully installed bundler-1.3.5
  1 gem installed
  Installing ri documentation for bundler-1.3.5...
  Building YARD (yri) index for bundler-1.3.5...
  Installing RDoc documentation for bundler-1.3.5...
</code></pre>

<h4>.gitignoreの編集</h4>

<p>次の記述を削除します。</p>

<pre><code>-/config/configuration.yml
-/config/email.yml
-/config/initializers/session_store.rb
-/config/initializers/secret_token.r

-/public/plugin_assets

-/Gemfile.lock
-/Gemfile.local
</code></pre>

<h4>Gemfileの編集</h4>

<p>次のように書き換えました。</p>

<pre><code>source 'https://rubygems.org'

gem "rails", "3.2.13"
gem "jquery-rails", "~&gt; 2.0.2"
gem "i18n", "~&gt; 0.6.0"
gem "coderay", "~&gt; 1.0.6"
gem "fastercsv", "~&gt; 1.5.0", :platforms =&gt; [:mri_18, :mingw_18, :jruby]
gem "builder", "3.0.0"

group :ldap do
  gem "net-ldap", "~&gt; 0.3.1"
end

group :openid do
  gem "ruby-openid", "~&gt; 2.1.4", :require =&gt; "openid"
  gem "rack-openid"
end

platforms :mri, :mingw do
  group :rmagick do
    gem "rmagick", "&gt;= 2.0.0"
  end
end

platforms :mri, :mingw do  
  group :postgresql do  
    gem "pg", "&gt;= 0.11.0"  
  end  
end  

platforms :jruby do  
  gem "jruby-openssl"  

  group :postgresql do  
    gem "activerecord-jdbcpostgresql-adapter"  
  end  
end

group :development do
  gem "rdoc", "&gt;= 2.4.2"
  gem "yard"
end

group :test do
  gem "shoulda", "~&gt; 3.3.2"
  gem "mocha", "&gt;= 0.14", :require =&gt; 'mocha/api'
  if RUBY_VERSION &gt;= '1.9.3'
    gem "capybara", "~&gt; 2.1.0"
    gem "selenium-webdriver"
  end
end

local_gemfile = File.join(File.dirname(__FILE__), "Gemfile.local")
if File.exists?(local_gemfile)
  puts "Loading Gemfile.local ..." if $DEBUG # `ruby -d` or `bundle -v`
  instance_eval File.read(local_gemfile)
end

# Load plugins' Gemfiles
Dir.glob File.expand_path("../plugins/*/Gemfile", __FILE__) do |file|
  puts "Loading #{file} ..." if $DEBUG # `ruby -d` or `bundle -v`
  #TODO: switch to "eval_gemfile file" when bundler &gt;= 1.2.0 will be required (rails 4)
  instance_eval File.read(file), file
end
</code></pre>

<h4>config/application.rbの編集</h4>

<p>次の記述を追記しました。</p>

<pre><code>+    config.assets.initialize_on_precompile = false
</code></pre>

<h4>config/environment.rbの編集</h4>

<p>次の記述をコメントアウトします。</p>

<pre><code>-vendor_plugins_dir = File.join(Rails.root, "vendor", "plugins")
-if Dir.glob(File.join(vendor_plugins_dir, "*")).any?
-  $stderr.puts "Plugins in vendor/plugins (#{vendor_plugins_dir}) are no longer allowed. " +
-    "Please, put your Redmine plugins in the `plugins` directory at the root of your " +
-    "Redmine directory (#{File.join(Rails.root, "plugins")})"
-  exit 1
-end
+#vendor_plugins_dir = File.join(Rails.root, "vendor", "plugins")
+#if Dir.glob(File.join(vendor_plugins_dir, "*")).any?
+#  $stderr.puts "Plugins in vendor/plugins (#{vendor_plugins_dir}) are no longer allowed. " +
+#    "Please, put your Redmine plugins in the `plugins` directory at the root of your " +
+#    "Redmine directory (#{File.join(Rails.root, "plugins")})"
+#  exit 1
+#end
</code></pre>

<h4>Gemパッケージのインストール</h4>

<p>必要なGemパッケージをインストールします。config/database.ymlの設定を促されていますが、現時点では設定しません。</p>

<pre><code>$ bundle install

  Please configure your config/database.yml first
  Fetching gem metadata from https://rubygems.org/.........
  Resolving dependencies...
  ...
  Your bundle is complete!
</code></pre>

<p>セッションストアを生成します。</p>

<pre><code>$ bundle exec rake generate_secret_token

  Please configure your config/database.yml first
  Please configure your config/database.yml first
</code></pre>

<h4>アプリケーションの作成</h4>

<p>Herokuツールベルトを使用して、アプリケーションを作成します。ツールベルトと同様に、Herokuアカウントの登録が必要です。</p>

<pre><code>$ heroku login

  Enter your Heroku credentials.
  Email: ********
  Password (typing will be hidden): 
  Authentication successful.

$ heroku create [NAME]

  Creating [NAME]... done, stack is cedar
  http://[NAME].herokuapp.com/ | git@heroku.com:[NAME].git
  Git remote heroku added
</code></pre>

<h4>Herokuへ配置</h4>

<p>Gitを使用します。Pushの時点でconfig/database.ymlが自動的に作られるようです。</p>

<pre><code>$ git add .
$ git commit -m "init"
$ git push heroku production:master

  -----&gt; Ruby/Rails app detected
  -----&gt; Installing dependencies using Bundler version 1.3.2
  -----&gt; Writing config/database.yml to read from DATABASE_URL
  -----&gt; Preparing app for Rails asset pipeline

  -----&gt; Launching... done, v8
</code></pre>

<h4>テーブルやデフォルトデータの用意</h4>

<p>言語を選択するプロンプトが現れます。</p>

<pre><code>$ heroku run rake db:migrate

  Connecting to database specified by DATABASE_URL
  Creating scope :system. Overwriting existing method Enumeration.system.
  ...

$ heroku run rake redmine:load_default_data

  Connecting to database specified by DATABASE_URL
  Creating scope :system. Overwriting existing method Enumeration.system.

  Select language: ar, az, bg, bs, ca, cs, da, de, el, en, en-GB, es, et, eu, fa, fi, fr, gl, he, hr, hu, id, it, ja, ko, lt, lv, mk, mn, nl, no, pl, pt, pt-BR, ro, ru, sk, sl, sq, sr, sr-YU, sv, th, tr, uk, vi, zh, zh-TW [en] ja
  ====================================
  Default configuration data loaded.
</code></pre>

<h4>動作確認</h4>

<p>HerokuのアプリケーションURLへアクセスして、動作を確認します。</p>

<p><img src="/blog/images/2013-05-31-deploy-redmine-2-dot-3-1-on-heroku/01.png" width="500"></p>

<h4>参考</h4>

<ul>
<li><a href="https://github.com/redmine/redmine">Redmine</a></li>
<li><a href="http://redmine.jp/guide/RedmineInstall/">Redmineのインストール &mdash; Redmine Guide 日本語訳</a></li>
<li><a href="https://devcenter.heroku.com/articles/rails3">Getting Started with Rails 3.x on Heroku | Heroku Dev Center</a></li>
</ul>


<h4>関連記事</h4>

<ul>
<li><a href="/blog/2013/08/24/deploying-redmine-2-dot-0-on-openshift/">Red Hat OpenShiftにRedmine 2.0を展開する</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
