<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WWW | momoto.github.io]]></title>
  <link href="http://momoto.github.io/blog/categories/www/atom.xml" rel="self"/>
  <link href="http://momoto.github.io/"/>
  <updated>2013-10-14T03:16:04+09:00</updated>
  <id>http://momoto.github.io/</id>
  <author>
    <name><![CDATA[Seiji Momoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YumをつかってApache HTTP Server 2.2をインストールする]]></title>
    <link href="http://momoto.github.io/blog/2013/10/13/installing-apache-http-server-2-dot-2-15-using-yum/"/>
    <updated>2013-10-13T11:29:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/10/13/installing-apache-http-server-2-dot-2-15-using-yum</id>
    <content type="html"><![CDATA[<p>　パッケージ管理システムのYumをつかって、Apache HTTP Server 2.2.15をインストールします。OSはCentOS 6を使用しています。</p>

<!-- more -->


<p>　RHEL 6互換のCentOSの標準リポジトリではhttpdパッケージでApache HTTP Serverが提供されています。パッケージの情報は<code>yum info &lt;パッケージ名&gt;</code>で調べることができます。
パッケージ情報が示すとおり、httpdパッケージ（i686）からインストールできるApacheのバージョンは<strong>2.2.15</strong>になります。</p>

<pre><code>$ yum info httpd

Available Packages
Name        : httpd
Arch        : i686
Version     : 2.2.15
Release     : 29.el6.centos
Size        : 828 k
Repo        : updates
Summary     : Apache HTTP Server
URL         : http://httpd.apache.org/
License     : ASL 2.0
Description : The Apache HTTP Server is a powerful, efficient, and extensible
            : web server.
</code></pre>

<p>　インストールには<code>yum install &lt;パッケージ名&gt;</code>を実行するだけで、パッケージ管理システムが依存関係を解決し、必要なパッケージと共にインストールが完了します。</p>

<pre><code>$ sudo yum install httpd
Setting up Install Process

...

Installed:
  httpd.i686 0:2.2.15-29.el6.centos

Dependency Installed:
  apr.i686 0:1.3.9-5.el6_2                    apr-util.i686 0:1.3.9-3.el6_0.1
  apr-util-ldap.i686 0:1.3.9-3.el6_0.1        httpd-tools.i686 0:2.2.15-29.el6.centos
  mailcap.noarch 0:2.1.31-2.el6

Complete!
</code></pre>

<p>　httpdパッケージが提供しているファイルは<code>rpm -ql httpd</code>で一覧を得られますが、出力は300行以上に及ぶためディレクトリごとにファイルの役割をみてみます。</p>

<pre><code>$ rpm -ql httpd | gawk -F/ '{print "/"$2"/"$3}' | uniq -c
     10 /etc/httpd
      1 /etc/logrotate.d
      2 /etc/rc.d
      2 /etc/sysconfig
     66 /usr/lib
      8 /usr/sbin
     12 /usr/share
      1 /var/cache
      1 /var/lib
      1 /var/log
      1 /var/run
    252 /var/www
</code></pre>

<table class="table">
<caption>（表）httpdパッケージが提供するファイルやディレクトリの概要</caption>
<tbody>
<tr><td>/etc/httpd/</td><td>conf/httpd.confなど設定ファイルを格納しているディレクトリ（サーバルート）</td></tr>
<tr><td>/etc/logrotate.d/httpd</td><td>httpdのログローテーションの設定</td></tr>
<tr><td>/etc/rc.d/init.d/{htcacheclean, httpd}</td><td>httpdとhtcachecleanの起動スクリプト</td></tr>
<tr><td>/etc/sysconfig/{htcacheclean, httpd}</td><td>preforkかworkerの切り替え等、サービスの設定ファイル</td></tr>
<tr><td>/usr/lib/httpd/modules/mod_*.so</td><td>Apacheモジュールの共有ライブラリファイル</td></tr>
<tr><td>/usr/sbin/{apachectl, httpdなど}</td><td>Apache各種コマンドの実行ファイル</td></tr>
<tr><td>/usr/share/{doc/, man/}</td><td>Apacheのドキュメントやmanページ</td></tr>
<tr><td>/var/cache/mod_proxy/</td><td>mod_disk_cacheのCacheRootディレクトリ</td></tr>
<tr><td>/var/lib/dav/</td><td>mod_davのロックデータベースディレクトリ</td></tr>
<tr><td>/var/log/httpd/</td><td>httpdのログを格納するディレクトリ</td></tr>
<tr><td>/var/run/httpd/</td><td>httpdのプロセスIDファイルを格納するディレクトリ</td></tr>
<tr><td>/var/www/</td><td>HTMLファイル等のコンテンツを格納しているディレクトリ（/var/www/htmlがデフォルトのドキュメントルート）</td></tr>
</tbody>
</table>


<p>　httpd-2.2.15-29.el6.centos.i686では、実行ファイルのhttpd（prefork）とhttpd.workerはそれぞれ次のようにコンパイルされています。</p>

<pre><code>$ /usr/sbin/httpd -V
...
Server compiled with....
 -D APACHE_MPM_DIR="server/mpm/prefork"
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)
 -D APR_USE_SYSVSEM_SERIALIZE
 -D APR_USE_PTHREAD_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D DYNAMIC_MODULE_LIMIT=128
 -D HTTPD_ROOT="/etc/httpd"
 -D SUEXEC_BIN="/usr/sbin/suexec"
 -D DEFAULT_PIDLOG="run/httpd.pid"
 -D DEFAULT_SCOREBOARD="logs/apache_runtime_status"
 -D DEFAULT_LOCKFILE="logs/accept.lock"
 -D DEFAULT_ERRORLOG="logs/error_log"
 -D AP_TYPES_CONFIG_FILE="conf/mime.types"
 -D SERVER_CONFIG_FILE="conf/httpd.conf"

$ /usr/sbin/httpd.worker -V
...
Server compiled with....
 -D APACHE_MPM_DIR="server/mpm/worker"
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)
 -D APR_USE_SYSVSEM_SERIALIZE
 -D APR_USE_PTHREAD_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D DYNAMIC_MODULE_LIMIT=128
 -D HTTPD_ROOT="/etc/httpd"
 -D SUEXEC_BIN="/usr/sbin/suexec"
 -D DEFAULT_SCOREBOARD="logs/apache_runtime_status"
 -D DEFAULT_ERRORLOG="logs/error_log"
 -D AP_TYPES_CONFIG_FILE="conf/mime.types"
 -D SERVER_CONFIG_FILE="conf/httpd.conf"
</code></pre>

<p>　serviceユーティリティをつかってhttpdを起動させたあと、curlでウェブサーバの動作を確認してみます。</p>

<pre><code>$ sudo service httpd start
                                                           [  OK  ]
$ curl -D - -s -o /dev/null localhost
HTTP/1.1 403 Forbidden
Date: Sun, 13 Oct 2013 09:08:07 GMT
Server: Apache/2.2.15 (CentOS)
Accept-Ranges: bytes
Content-Length: 5039
Connection: close
Content-Type: text/html; charset=UTF-8
</code></pre>

<p>　デフォルトの設定のままではDocumentRoot（/var/www/html）のDirectoryIndex（index.html）が見つからず、/etc/httpd/conf.d/welcome.confでは<code>Options -Indexes</code>が設定されているため、
HTTPステータスコードは<code>403 Forbidden</code>、メッセージボディには/var/www/error/noindex.htmlを応答しています。</p>

<p>　/var/www/html/index.htmlを作成したあとに再度リクエストしてみると<code>200 OK</code>を応答するようになります。</p>

<pre><code>$ echo '&lt;html&gt;&lt;body&gt;It works!&lt;/body&gt;&lt;/html&gt;' | sudo tee /var/www/html/index.html
&lt;html&gt;&lt;body&gt;It works!&lt;/body&gt;&lt;/html&gt;
$ curl -D - localhost
HTTP/1.1 200 OK
Date: Sun, 13 Oct 2013 09:12:35 GMT
Server: Apache/2.2.15 (CentOS)
Last-Modified: Sun, 13 Oct 2013 09:12:16 GMT
ETag: "20584-24-4e8a167dd7f45"
Accept-Ranges: bytes
Content-Length: 36
Connection: close
Content-Type: text/html; charset=UTF-8

&lt;html&gt;&lt;body&gt;It works!&lt;/body&gt;&lt;/html&gt;
</code></pre>

<h4>参考</h4>

<ul>
<li><a href="https://access.redhat.com/site/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/ch-Web_Servers.html">Red Hat Enterprise Linux 6 Deployment Guide 第15章 Web サーバー – Red Hat Customer Portal</a></li>
<li><a href="https://access.redhat.com/site/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Managing_Confined_Services/chap-Managing_Confined_Services-The_Apache_HTTP_Server.html">Red Hat Enterprise Linux 6.4 Managing Confined Services 第3章 Apache HTTP Server – Red Hat Customer Portal</a></li>
<li><a href="http://httpd.apache.org/docs/2.2/ja/">Apache HTTP サーバ バージョン 2.2 ドキュメント &ndash; Apache HTTP サーバ</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/0508/02/news102.html">実用 Apache 2.0運用・管理術（1）：Apache 2.0の必須設定と基本セキュリティ対策 &ndash; ＠IT</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache HTTP ServerのSPDYサポートを有効化する]]></title>
    <link href="http://momoto.github.io/blog/2013/09/08/enabling-spdy-for-apache-http-server/"/>
    <updated>2013-09-08T01:00:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/09/08/enabling-spdy-for-apache-http-server</id>
    <content type="html"><![CDATA[<p>　mod_spdyをつかってApache HTTP ServerのSPDYサポートを有効化します。mod_spdyは<a href="http://code.google.com/p/mod-spdy/">code.google.com</a>で配布されています。</p>

<!-- more -->


<h4>mod_spdyのRPMパッケージ 64ビットをインストールする場合</h4>

<pre><code>$ wget https://dl-ssl.google.com/dl/linux/direct/mod-spdy-beta_current_x86_64.rpm
$ rpm -U mod-spdy-*.rpm
</code></pre>

<p>　at, httpd, mod_sslなどに依存しているようです。</p>

<h4>mod-spdyが提供するファイル</h4>

<pre><code>$ rpm -ql mod-spdy-beta
/etc/cron.daily/mod-spdy
/etc/httpd/conf.d/load_ssl_with_npn.conf
/etc/httpd/conf.d/spdy.conf
/usr/lib64/httpd/modules/mod_spdy.so
/usr/lib64/httpd/modules/mod_ssl_with_npn.so
</code></pre>

<p>　設定ファイルはload_ssl_with_npn.confとspdy.confです。SSL/TLSが有効になっていること、spdy.confの<code>SpdyEnabled</code>がonになっていること等を確認したらApacheを再起動します。</p>

<pre><code>$ apachectl -M | grep -E "spdy|ssl"
 ssl_module (shared)
 spdy_module (shared)
Syntax OK
$ /etc/init.d/httpd restart
Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]
</code></pre>

<h4>画像表示の比較</h4>

<p>　同じドメインの画像ファイル20個をブラウザに表示する様子を簡単に比較してみます。
正確な比較ではありませんが、リクエストのタイムラインが変化している様子をブラウザの開発ツールからも確認できます。</p>

<ul>
<li><h5>通常のHTTPS</h5>

<p>　左がFirefoxのネットワークモニタ、右がChrome DevToolsのネットワークパネルです。</p>

<p><img class="left" src="/blog/images/2013-09-08-enabling-spdy-for-apache-http-server/0101-ssl-with-firefox.png" width="500">
<img src="/blog/images/2013-09-08-enabling-spdy-for-apache-http-server/0102-ssl-with-chrome.png" width="500"></p></li>
<li><h5>SPDYが有効</h5>

<p>　通常のHTTPSからSPDYを有効に切り替えて、同じコンテンツをリクエストした様子です。</p>

<p><img class="left" src="/blog/images/2013-09-08-enabling-spdy-for-apache-http-server/0201-spdy-with-firefox.png" width="500">
<img src="/blog/images/2013-09-08-enabling-spdy-for-apache-http-server/0202-spdy-with-chrome.png" width="500"></p>

<p>　Firefoxでは画像ファイルのSending（リクエスト送信にかかる時間）がほとんどなくなってWaiting（イニシャルレスポンスを待つ時間）に入れ替わっています。
Chromeでは画像ファイルのサイズが0Bになっています（code.google.comのChromiumプロジェクトにバグとして報告されているようです<a href="https://code.google.com/p/chromium/issues/detail?id=154706">Issue #154706</a>）。</p></li>
<li><h5>SPDYが有効（画像ファイルをサーバープッシュ）</h5>

<p>　画像ファイルをX-Associated-Contentでサーバープッシュしています。</p>

<p><img class="left" src="/blog/images/2013-09-08-enabling-spdy-for-apache-http-server/0301-server-push-with-firefox.png" width="500">
<img src="/blog/images/2013-09-08-enabling-spdy-for-apache-http-server/0302-server-push-with-chrome.png" width="500"></p>

<p>　Chromeでは画像ファイルがCacheからの読み込みとなってタイムラインが大幅に短くなりました（キャッシュはちゃんと消してアクセスしたと思います・・・）。
X-Associated-Contentを追加した代わりにHTMLファイルの読み込み時間は伸びています。</p></li>
</ul>


<h4>参考</h4>

<ul>
<li><a href="https://developers.google.com/speed/spdy/">SPDY &ndash; SPDY &mdash; Google Developers</a></li>
<li><a href="http://code.google.com/p/mod-spdy/wiki/OptimizingForSpdy">How to tune your server to serve pages over SPDY efficiently &ndash; Apache SPDY module &ndash; Google Project Hosting</a></li>
<li><a href="http://www.iij.ad.jp/company/development/tech/activities/spdy/">Web表示の高速化を実現するSPDYとHTTP/2.0の標準化 | 最新の技術動向 | IIJ</a></li>
<li><a href="https://developer.mozilla.org/ja/docs/Tools/Network_Monitor">ネットワークモニタ &ndash; 開発ツール | MDN</a></li>
<li><a href="https://developers.google.com/chrome-developer-tools/docs/network">Evaluating network performance &ndash; Chrome DevTools &mdash; Google Developers</a></li>
</ul>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_top&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=seijimomotobl-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774150363" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_top&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=seijimomotobl-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=477415783X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache HTTP ServerのSSL/TLSサポートを有効化する]]></title>
    <link href="http://momoto.github.io/blog/2013/09/08/enabling-ssl-for-apache-http-server/"/>
    <updated>2013-09-08T00:00:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/09/08/enabling-ssl-for-apache-http-server</id>
    <content type="html"><![CDATA[<p>　mod_sslをつかってApache HTTP ServerのSSL/TLSサポートを有効化します。
SSLを有効にするために必要なRSA秘密鍵と公開鍵証明書のうち、公開鍵証明書は第三者の認証局に署名してもらうのが通常ですが、この記事では検証のため自己発行証明書をつかいます。</p>

<!-- more -->


<p>　手順としては(1) RSA秘密鍵を生成、(2) 証明書署名要求（CSR）を作成、(3) 公開鍵証明書を発行、その後、ウェブサーバでSSL/TLSを設定します。(3)の「公開鍵証明書の発行」は本来、認証局で行う手順です。</p>

<ol>
<li><h3>OpenSSLをつかってRSA秘密鍵と証明書署名要求を用意する（申請者）</h3>

<p>　RSA秘密鍵の生成には<code>openssl genrsa -out &lt;秘密鍵ファイル名&gt; &lt;鍵長&gt;</code>のコマンドをつかいます。</p>

<pre><code>$ openssl genrsa -out localhost.key 2048
Generating RSA private key, 2048 bit long modulus
...................................................+++
...............+++
e is 65537 (0x10001)
</code></pre>

<p>　2013年9月現在、1024bit鍵長のCSRの受付を停止した認証局もあるように、鍵長は2048bitが一般的であるようです。</p>

<ul>
<li><a href="https://www.verisign.co.jp/ssl/about/20120531.html">旧来仕様のサーバIDおよび公開鍵長1024bitのCSRの受付停止について｜日本ベリサイン</a></li>
<li><a href="https://jp.globalsign.com/knowledge/ssl/use/1024bit.html">1024bitの証明書について｜グローバルサイン (旧日本ジオトラスト株式会社)</a></li>
</ul>


<p>　<code>openssl genrsa</code>のオプションによって、生成したRSA秘密鍵を別の暗号方式で暗号化することや、乱数生成につかわれるシード値をファイルで指定することもできます。
RSA秘密鍵をAESやDESなどの共通鍵暗号方式で暗号化する場合は秘密鍵にパスフレーズを設定します。このパスフレーズはウェブサーバの起動時や証明書署名要求ファイル作成時に入力が必要になります。</p>

<p>　続いて、RSA秘密鍵をもとに証明書署名要求ファイルを作成します。OpenSSLコマンドは<code>openssl req -new -key &lt;秘密鍵ファイル名&gt; -out &lt;証明書署名要求ファイル名&gt;</code>をつかいます。
CSRの作成にはディスティングイッシュネームの入力が必要です。</p>

<pre><code>$ openssl req -new -key localhost.key -out localhost.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:JP
State or Province Name (full name) []:Tokyo
Locality Name (eg, city) [Default City]:Shinjuku
Organization Name (eg, company) [Default Company Ltd]:Localhost, Local Area Network
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server's hostname) []:localhost
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
</code></pre>

<ul>
<li><a href="https://www.verisign.co.jp/ssl/help/faq/110041/">ディスティングイッシュネームとは何ですか | 日本ベリサイン</a></li>
<li><a href="https://jp.globalsign.com/support/faq/74.html">ディスティングイッシュネームとは何ですか | グローバルサイン</a></li>
<li><a href="https://crosstrust.co.jp/support/faq/faq08/a002">ディスティングイッシュネームとは何ですか？ | クロストラスト </a></li>
</ul>
</li>
<li><h3>公開鍵証明書を発行する（認証局）</h3>

<p>　証明書署名要求ファイルと認証局の私有鍵をもとに公開鍵証明書を発行します。
OpenSSLコマンドは<code>openssl ca -in &lt;証明書署名要求ファイル名&gt; -out &lt;公開鍵証明書ファイル名&gt;</code>をつかいます。</p>

<pre><code>$ openssl ca -in localhost.csr -out localhost.self-signed.crt
Using configuration from /etc/pki/tls/openssl.cnf
Enter pass phrase for /etc/pki/CA/private/cakey.pem:
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number:
            ec:65:47:48:ff:6d:ff:cc
        Validity
            Not Before: Sep  7 00:00:00 2013 GMT
            Not After : Sep  7 00:00:00 2014 GMT
        Subject:
            countryName               = JP
            stateOrProvinceName       = Tokyo
            organizationName          = Localhost, Local Area Network
            commonName                = localhost
        X509v3 extensions:
            X509v3 Basic Constraints:
                CA:TRUE
            Netscape Comment:
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
                02:B3:E2:99:8B:C9:E8:F2:33:A7:27:1B:FD:D6:9E:64:C9:12:D2:7E
            X509v3 Authority Key Identifier:
                keyid:15:F3:B6:82:FD:BB:41:AF:F2:AE:D9:BD:E1:C0:2E:B6:A5:23:C6:FA

Certificate is to be certified until Sep  7 00:00:00 2014 GMT (365 days)
Sign the certificate? [y/n]:y


1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
</code></pre>

<p>　認証局は発行した公開鍵証明書を申請者に渡して、申請者は公開鍵証明書をウェブサーバに移動します。</p></li>
<li><h3>mod_sslを設定する（Apache HTTP Server）</h3>

<p>　<a href="http://www.modssl.org/source/">www.modssl.org</a>やディストリビューションからmod_sslをインストールします。</p>

<pre><code>$ sudo yum install mod_ssl
</code></pre>

<p>　上記の手順で用意したRSA秘密鍵と公開鍵証明書を、Apache実行ユーザが読み込めるファイルパスに設置します。同様にパーミッションも適宜、設定します。</p>

<pre><code>$ sudo mv localhost.key /etc/pki/tls/private/
$ sudo mv localhost.self-signed.crt /etc/pki/tls/certs/
$ sudo chmod 0600 /etc/pki/tls/certs/localhost.self-signed.crt
$ sudo chmod 0600 /etc/pki/tls/private/localhost.key
</code></pre>

<p>　Apacheの設定ファイル（<code>&lt;ServerRoot&gt;/conf.d/ssl.conf</code>など）を編集して、SSLCertificateFileディレクティブとSSLCertificateKeyFileディレクティブを設定します。</p>

<pre><code>SSLCertificateFile /etc/pki/tls/certs/localhost.self-signed.crt
SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
</code></pre>

<p>　Apacheを再起動します。RSA秘密鍵を暗号化している場合はパスフレーズの入力が必要です。</p>

<pre><code>$ sudo apachectl -t
Syntax OK
$ sudo /etc/init.d/httpd restart
Stopping httpd:                                            [  OK  ]
Starting httpd: Apache/2.2.15 mod_ssl/2.2.15 (Pass Phrase Dialog)
Some of your private key files are encrypted for security reasons.
In order to read them you have to provide the pass phrases.

Server localhost:443 (RSA)
Enter pass phrase:

OK: Pass Phrase Dialog successful.
                                                           [  OK  ]
</code></pre></li>
</ol>


<p>　ウェブサーバにアクセスしてみると、発行者不明（sec_error_unknown_issuer）のため接続を信頼されていませんが、接続は暗号化されているようです。</p>

<p><img src="/blog/images/2013-09-08-enabling-ssl-for-apache-http-server/01-untrusted-connection.png" width="500" title="安全性を確認できない接続" ></p>

<p><img src="/blog/images/2013-09-08-enabling-ssl-for-apache-http-server/02-connection-encrypted.png" width="500" title="暗号化された接続" ></p>

<p>　証明書情報を表示すると入力したディスティングイッシュネームを確認することができます。また、この記事の例では主体者と発行者が同一になっていることも確認できます。</p>

<p><img src="/blog/images/2013-09-08-enabling-ssl-for-apache-http-server/03-could-not-verify-this-certificate.png" width="500" title="信頼性を検証できない証明書" ></p>

<h2>参考</h2>

<ul>
<li><a href="https://www.verisign.co.jp/ssl/pdf/baseline_requirements1.0_jp.pdf">CA/ブラウザフォーラム パブリック証明書の発行および管理に関する基本要件v.1.0 | www.verisign.co.jp</a></li>
<li><a href="https://jp.globalsign.com/repository/baseline_requirements_ja.pdf">CA/ブラウザフォーラム パブリック証明書発行及びマネジメントの基本要件 ver1.0 | jp.globalsign.com</a></li>
<li><a href="http://httpd.apache.org/docs/2.2/mod/mod_ssl.html">mod_ssl &ndash; Apache HTTP Server</a></li>
<li><a href="http://www.openssl.org/docs/">OpenSSL: Documents, Misc</a></li>
<li><a href="http://x68000.q-e-d.net/~68user/unix/pickup?openssl">UNIXの部屋 コマンド検索:openssl (*BSD/Linux)</a></li>
<li><a href="https://support.mozilla.org/ja/kb/Secure%20Connection%20Failed">安全な接続ができませんでした | Firefox ヘルプ</a></li>
</ul>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_top&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=seijimomotobl-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=490531822X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_top&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=seijimomotobl-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=477415783X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache HTTP Server 2.4.6をインストールする（ソースからビルドする方法）]]></title>
    <link href="http://momoto.github.io/blog/2013/07/31/guide-to-compiling-and-installing-apache-http-server-2-dot-4-6/"/>
    <updated>2013-07-31T22:10:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/07/31/guide-to-compiling-and-installing-apache-http-server-2-dot-4-6</id>
    <content type="html"><![CDATA[<p>　Apache HTTP Server 2.4.6をソースコードからビルドして、Unix系システムへインストールする手引きです。
この記事ではCentOS 6.4環境でインストールの例を示しますが、自身でソースからビルドする方法は特定のLinuxディストリビューションに依りません。</p>

<!-- more -->


<p>　インストールを行うユーザは、インストール先ディレクトリに対して書込み権限をもっている必要があります。/usr/local/* にインストールする場合、通常、root権限が必要です。</p>

<ol>
<li><h3>ソースコードを取得する</h3>

<p>　ソースコードをインストールするマシンに用意します。
インターネットからダウンロードする場合、<a href="http://httpd.apache.org/download.cgi#apache24" title="Download - The Apache HTTP Server Project">httpd.apache.org</a>にソースコードのURLが示されています。
bzip2、gzipのアーカイブが用意されていますので、マシンで解凍・展開できる形式を選択してください。</p>

<p>　ダウンロードにはcURLやGNU Wgetなどのダウンロードマネージャやウェブブラウザを使用します。
次の例では、cURLをつかって<a href="http://ftp.riken.jp/net/apache/" title="Software archives at ftp.riken.jp">理化学研究所</a>のミラーからhttpd-2.4.6.tar.gzをダウンロードします。</p>

<pre><code>[root@localhost ~]# curl -LsO http://ftp.riken.jp/net/apache//httpd/httpd-2.4.6.tar.gz
</code></pre>

<p>　取得したアーカイブファイルは適宜、解凍・展開して、ワーキングディレクトリを移動させます。
<a href="http://www.pathname.com/fhs/pub/fhs-2.3.html#USRLOCALLOCALHIERARCHY" title="Filesystem Hierarchy Standard 2.3">FHS</a>に従うシステムであれば、独自にインストールするソフトウェアのためのディレクトリ /usr/local が予め用意されていますので、この記事ではソースコードを /usr/local/src に配置してインストールをすすめます。</p>

<pre><code>[root@localhost ~]# tar xfz httpd-2.4.6.tar.gz -C /usr/local/src/
[root@localhost ~]# cd /usr/local/src/httpd-2.4.6/
[root@localhost httpd-2.4.6]# 
</code></pre></li>
<li><h3>インストール要件を満たす</h3>

<p>　マシンがインストールの要件を満たしている必要があります。
要件については<a href="http://httpd.apache.org/docs/2.4/en/install.html" title="Compiling and Installing - Apache HTTP Server">Documentation</a>に詳しい説明があります。</p>

<ul>
<li><p>Cコンパイラ</p>

<pre><code>[root@localhost ~]# yum install gcc
</code></pre></li>
<li><p>Make</p>

<pre><code>[root@localhost ~]# yum install make
</code></pre></li>
<li><p><a href="http://apr.apache.org/" title="The Apache Portable Runtime Project">APR</a> &ndash; 予めシステムに備わっていない場合（またはシステムが提供するバージョンを使用したくない場合）は<a href="http://apr.apache.org/download.cgi" title="Download - The Apache Portable Runtime Project">apr.apache.org</a>から取得してhttpdに含めてビルドします。取得したAPRとAPR-Utilはバージョン番号を取り除いて"./srclib/apr"と"./srclib/apt-util"に展開します。</p>

<pre><code>[root@localhost httpd-2.4.6]# cd srclib/
[root@localhost srclib]# curl -Lso apr-1.4.8.tar.gz http://ftp.jaist.ac.jp/pub/apache//apr/apr-1.4.8.tar.gz
[root@localhost srclib]# tar xfz apr-1.4.8.tar.gz
[root@localhost srclib]# mv apr-1.4.8/ apr
[root@localhost srclib]# curl -Lso apr-util-1.5.2.tar.gz http://ftp.jaist.ac.jp/pub/apache//apr/apr-util-1.5.2.tar.gz
[root@localhost srclib]# tar xfz apr-util-1.5.2.tar.gz
[root@localhost srclib]# mv apr-util-1.5.2/ apr-util
</code></pre></li>
<li><p>PCREライブラリ &ndash; <a href="http://www.pcre.org/" title="PCRE - Perl Compatible Regular Expressions">www.pcre.org</a>やディストリビューションからインストールします。</p>

<pre><code>[root@localhost httpd-2.4.6]# yum install pcre-devel
</code></pre></li>
</ul>
</li>
<li><h3>ビルドファイルを作成する</h3>

<p>　configureをつかってビルドファイルを作成します。configureにオプションを与えることで、インストール先のディレクトリや有効にするモジュールを調整できます。
指定できるオプションについては<code>configure --help</code>や<a href="http://httpd.apache.org/docs/2.4/en/programs/configure.html">Documentation</a>を参照してください。
ビルドの要件を満たしていない場合、configureの処理は中断されます。</p>

<p>　例えば、インストール先のディレクトリを /usr/local/httpd-2.4.6 として、
<a href="http://httpd.apache.org/docs/2.4/en/dso.html" title="Dynamic Shared Object (DSO) Support - Apache HTTP Server">DSOサポート</a>を有効、<a href="http://httpd.apache.org/docs/2.4/en/mpm.html" title="Multi-Processing Modules (MPMs) - Apache HTTP Server">MPM</a>を<a href="http://httpd.apache.org/docs/2.4/en/mod/prefork.html" title="prefork - Apache HTTP Server">prefork</a>と明示して、
新たに取得したAPRを使用する場合は次のようにconfigureを実行します。</p>

<pre><code>[root@localhost httpd-2.4.6]# ./configure --prefix=/usr/local/httpd-2.4.6 --enable-so --with-mpm=prefork --with-included-apr
</code></pre>

<p>　次に、configureのエラー例をいくつか示します。</p>

<ul>
<li><h4>APR not found.</h4>

<pre><code>checking for APR... no
configure: error: APR not found.  Please read the documentation.
</code></pre>

<p>　APRが正しくインストールされているか確認してください。</p></li>
<li><h4>no acceptable C compiler found in $PATH</h4>

<pre><code>checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/usr/local/src/httpd-2.4.6/srclib/apr':
configure: error: no acceptable C compiler found in $PATH
</code></pre>

<p>　Cコンパイラが正しくインストールされているか確認してください。</p></li>
<li><h4>pcre-config for libpcre not found.</h4>

<pre><code>checking for pcre-config... false
configure: error: pcre-config for libpcre not found. PCRE is required and available from http://pcre.org/
</code></pre>

<p>　PCREライブラリが正しくインストールされているか確認してください。</p></li>
</ul>


<p>　configureの処理が終了してMakefileが作成されていれば、ビルドの段階へすすみます。</p></li>
<li><h3>ビルドとインストール</h3>

<p>　ビルドとインストールにはmakeを使います。ディスクの容量が充分足りていることを確認してください。</p>

<pre><code>[root@localhost httpd-2.4.6]# make &amp;&amp; make install
</code></pre>

<p>　makeの処理が無事に終了したらインストールは完了です。
configureの<code>--prefix</code>に指定した位置にファイルが展開されているはずです。PREFIXを指定していなかった場合は"/usr/local/apache2"になります。</p>

<pre><code>[root@localhost httpd-2.4.6]# /usr/local/httpd-2.4.6/bin/httpd -v
Server version: Apache/2.4.6 (Unix)
</code></pre></li>
</ol>


<h2>インストール後</h2>

<p>　必要に応じて、httpd.confの設定、起動スクリプトの設置、自動起動の設定、実行バイナリへのパスの設定を行なってください。
ソースコードのアーカイブには、標準のLSB起動スクリプトが用意されています。</p>

<pre><code>[root@localhost httpd-2.4.6]# cp /usr/local/src/httpd-2.4.6/build/rpm/httpd.init /etc/init.d/httpd
</code></pre>

<h3>動作を確認する</h3>

<p>　最後に、ウェブサーバの動作を少し確認してみます。
ウェブサーバにとって外部のホストから動作を確認する場合はファイアウォール等の制限を受けやすいので、まずはインストールを行ったマシンからループバックで確認するとネットワークアクセスの問題と区別できます。</p>

<p>　FirefoxやLynxなどのブラウザや、GNU WgetやcURLをつかって、自身に対してHTTPリクエストを送信します（Wget、cURLを使う場合、HTMLの描写はされません）。
うまく動作していればドキュメントルートに予め用意されているHTMLファイルを応答するはずです。</p>

<pre><code>[root@localhost ~]# lynx localhost
</code></pre>

<p><img src="/blog/images/2013-07-31-guide-to-compiling-and-installing-apache-http-server-2-dot-4-6/apache-http-server-works.png" title="LynxでApache HTTP Server 2.4.6の動作を確認する" ></p>

<p>　ネットワークアクセスを介すると動作が確認できなくなる場合、様々な原因が考えられますが、GNU/LinuxのシステムでよくあるのはiptablesやSELinuxなどのセキュリティによるものです。
外部からのアクセスを受け入れようとする場合はHTTPのネットワーク通信を許可する必要がありますが、これらの作業は実質、セキュリティ強度を緩和しているので、マシンが接続しているネットワークや記録しているコンテンツをよく確かめて設定するべきです。
Apache HTTP Serverの領域から少し外れますが、iptablesとSELinuxの設定の確認方法を示します。</p>

<ul>
<li><p>　iptablesを使用している場合、パケットフィルタのルールを確認します。
例えばCentOS 6.4の初期状態では下記のように、ポート80の受信の許可を明示していないため、外部のクライアントからのリクエストに応答できません。</p>

<pre><code>[root@localhost ~]# iptables --list-rules
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
</code></pre>

<p>　上記のようなルールの場合、<code>-A INPUT -j REJECT --reject-with icmp-host-prohibited</code>の上に、<code>-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</code>というルールを新しく追加する等の変更が必要になります。
変更の方法も様々ですが、CentOS 6.4であれば/etc/sysconfig/iptablesを書き換えた後にiptablesを再起動するとルールが再設定されます。</p></li>
<li><p>　SELinuxを使用している場合、<code>httpd_can_network_connect</code>の値を確認します。</p>

<pre><code>[root@localhost ~]# getsebool httpd_can_network_connect
httpd_can_network_connect --&gt; off
</code></pre>

<p>　ネットワークを通してウェブサーバを使用する場合は、この値にonを設定します。</p>

<pre><code>[root@localhost ~]# setsebool -P httpd_can_network_connect on
</code></pre>

<p>　<code>httpd_can_network_connect</code>の他、CGIやDBを制限する項目もあるので、用途に応じて適当なポリシーを設定する必要があります。</p></li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://httpd.apache.org/docs/2.4/" title="Apache HTTP Server Version 2.4 Documentation - Apache HTTP Server">Apache HTTP Server Version 2.4 Documentation &ndash; Apache HTTP Server</a></li>
<li><a href="http://apr.apache.org/" title="The Apache Portable Runtime Project">The Apache Portable Runtime Project</a></li>
</ul>


<h3>関連記事</h3>

<ul>
<li><a href="/blog/2013/07/31/guide-to-compiling-and-installing-mysql-community-server-5-dot-6-13/">MySQL Community Server 5.6.13をインストールする（ソースからビルドする方法）</a></li>
<li><a href="/blog/2013/07/31/guide-to-compiling-and-installing-php-5-dot-5-1/">PHP 5.5.1をインストールする（ソースからビルドする方法）</a></li>
<li><a href="/blog/2013/04/06/install-centos-6-dot-4-i386-netinstall/">CentOS 6.4をインストールする</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
