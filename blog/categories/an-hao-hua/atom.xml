<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[暗号化 | momoto.github.io]]></title>
  <link href="http://momoto.github.io/blog/categories/an-hao-hua/atom.xml" rel="self"/>
  <link href="http://momoto.github.io/"/>
  <updated>2013-09-16T00:08:08+09:00</updated>
  <id>http://momoto.github.io/</id>
  <author>
    <name><![CDATA[Seiji Momoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache HTTP ServerのSSL/TLSサポートを有効化する]]></title>
    <link href="http://momoto.github.io/blog/2013/09/08/enabling-ssl-for-apache-http-server/"/>
    <updated>2013-09-08T00:00:00+09:00</updated>
    <id>http://momoto.github.io/blog/2013/09/08/enabling-ssl-for-apache-http-server</id>
    <content type="html"><![CDATA[<p>　mod_sslをつかってApache HTTP ServerのSSL/TLSサポートを有効化します。
SSLを有効にするために必要なRSA秘密鍵と公開鍵証明書のうち、公開鍵証明書は第三者の認証局に署名してもらうのが通常ですが、この記事では検証のため自己発行証明書をつかいます。<!-- more --></p>

<p>　手順としては(1) RSA秘密鍵を生成、(2) 証明書署名要求（CSR）を作成、(3) 公開鍵証明書を発行、その後、ウェブサーバでSSL/TLSを設定します。(3)の「公開鍵証明書の発行」は本来、認証局で行う手順です。</p>

<ol>
<li><h3>OpenSSLをつかってRSA秘密鍵と証明書署名要求を用意する（申請者）</h3>

<p>　RSA秘密鍵の生成には<code>openssl genrsa -out &lt;秘密鍵ファイル名&gt; &lt;鍵長&gt;</code>のコマンドをつかいます。</p>

<pre><code>$ openssl genrsa -out localhost.key 2048
Generating RSA private key, 2048 bit long modulus
...................................................+++
...............+++
e is 65537 (0x10001)
</code></pre>

<p>　2013年9月現在、1024bit鍵長のCSRの受付を停止した認証局もあるように、鍵長は2048bitが一般的であるようです。</p>

<ul>
<li><a href="https://www.verisign.co.jp/ssl/about/20120531.html">旧来仕様のサーバIDおよび公開鍵長1024bitのCSRの受付停止について｜日本ベリサイン</a></li>
<li><a href="https://jp.globalsign.com/knowledge/ssl/use/1024bit.html">1024bitの証明書について｜グローバルサイン (旧日本ジオトラスト株式会社)</a></li>
</ul>


<p>　<code>openssl genrsa</code>のオプションによって、生成したRSA秘密鍵を別の暗号方式で暗号化することや、乱数生成につかわれるシード値をファイルで指定することもできます。
RSA秘密鍵をAESやDESなどの共通鍵暗号方式で暗号化する場合は秘密鍵にパスフレーズを設定します。このパスフレーズはウェブサーバの起動時や証明書署名要求ファイル作成時に入力が必要になります。</p>

<p>　続いて、RSA秘密鍵をもとに証明書署名要求ファイルを作成します。OpenSSLコマンドは<code>openssl req -new -key &lt;秘密鍵ファイル名&gt; -out &lt;証明書署名要求ファイル名&gt;</code>をつかいます。
CSRの作成にはディスティングイッシュネームの入力が必要です。</p>

<pre><code>$ openssl req -new -key localhost.key -out localhost.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:JP
State or Province Name (full name) []:Tokyo
Locality Name (eg, city) [Default City]:Shinjuku
Organization Name (eg, company) [Default Company Ltd]:Localhost, Local Area Network
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server's hostname) []:localhost
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
</code></pre>

<ul>
<li><a href="https://www.verisign.co.jp/ssl/help/faq/110041/">ディスティングイッシュネームとは何ですか | 日本ベリサイン</a></li>
<li><a href="https://jp.globalsign.com/support/faq/74.html">ディスティングイッシュネームとは何ですか | グローバルサイン</a></li>
<li><a href="https://crosstrust.co.jp/support/faq/faq08/a002">ディスティングイッシュネームとは何ですか？ | クロストラスト </a></li>
</ul>
</li>
<li><h3>公開鍵証明書を発行する（認証局）</h3>

<p>　証明書署名要求ファイルと認証局の私有鍵をもとに公開鍵証明書を発行します。
OpenSSLコマンドは<code>openssl ca -in &lt;証明書署名要求ファイル名&gt; -out &lt;公開鍵証明書ファイル名&gt;</code>をつかいます。</p>

<pre><code>$ openssl ca -in localhost.csr -out localhost.self-signed.crt
Using configuration from /etc/pki/tls/openssl.cnf
Enter pass phrase for /etc/pki/CA/private/cakey.pem:
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number:
            ec:65:47:48:ff:6d:ff:cc
        Validity
            Not Before: Sep  7 00:00:00 2013 GMT
            Not After : Sep  7 00:00:00 2014 GMT
        Subject:
            countryName               = JP
            stateOrProvinceName       = Tokyo
            organizationName          = Localhost, Local Area Network
            commonName                = localhost
        X509v3 extensions:
            X509v3 Basic Constraints:
                CA:TRUE
            Netscape Comment:
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
                02:B3:E2:99:8B:C9:E8:F2:33:A7:27:1B:FD:D6:9E:64:C9:12:D2:7E
            X509v3 Authority Key Identifier:
                keyid:15:F3:B6:82:FD:BB:41:AF:F2:AE:D9:BD:E1:C0:2E:B6:A5:23:C6:FA

Certificate is to be certified until Sep  7 00:00:00 2014 GMT (365 days)
Sign the certificate? [y/n]:y


1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
</code></pre>

<p>　認証局は発行した公開鍵証明書を申請者に渡して、申請者は公開鍵証明書をウェブサーバに移動します。</p></li>
<li><h3>mod_sslを設定する（Apache HTTP Server）</h3>

<p>　<a href="http://www.modssl.org/source/">www.modssl.org</a>やディストリビューションからmod_sslをインストールします。</p>

<pre><code>$ sudo yum install mod_ssl
</code></pre>

<p>　上記の手順で用意したRSA秘密鍵と公開鍵証明書を、Apache実行ユーザが読み込めるファイルパスに設置します。同様にパーミッションも適宜、設定します。</p>

<pre><code>$ sudo mv localhost.key /etc/pki/tls/private/
$ sudo mv localhost.self-signed.crt /etc/pki/tls/certs/
$ sudo chmod 0600 /etc/pki/tls/certs/localhost.self-signed.crt
$ sudo chmod 0600 /etc/pki/tls/private/localhost.key
</code></pre>

<p>　Apacheの設定ファイル（<code>&lt;ServerRoot&gt;/conf.d/ssl.conf</code>など）を編集して、SSLCertificateFileディレクティブとSSLCertificateKeyFileディレクティブを設定します。</p>

<pre><code>SSLCertificateFile /etc/pki/tls/certs/localhost.self-signed.crt
SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
</code></pre>

<p>　Apacheを再起動します。RSA秘密鍵を暗号化している場合はパスフレーズの入力が必要です。</p>

<pre><code>$ sudo apachectl -t
Syntax OK
$ sudo /etc/init.d/httpd restart
Stopping httpd:                                            [  OK  ]
Starting httpd: Apache/2.2.15 mod_ssl/2.2.15 (Pass Phrase Dialog)
Some of your private key files are encrypted for security reasons.
In order to read them you have to provide the pass phrases.

Server localhost:443 (RSA)
Enter pass phrase:

OK: Pass Phrase Dialog successful.
                                                           [  OK  ]
</code></pre></li>
</ol>


<p>　ウェブサーバにアクセスしてみると、発行者不明（sec_error_unknown_issuer）のため接続を信頼されていませんが、接続は暗号化されているようです。</p>

<p><img src="/blog/images/2013-09-08-enabling-ssl-for-apache-http-server/01-untrusted-connection.png" width="500" title="安全性を確認できない接続" ></p>

<p><img src="/blog/images/2013-09-08-enabling-ssl-for-apache-http-server/02-connection-encrypted.png" width="500" title="暗号化された接続" ></p>

<p>　証明書情報を表示すると入力したディスティングイッシュネームを確認することができます。また、この記事の例では主体者と発行者が同一になっていることも確認できます。</p>

<p><img src="/blog/images/2013-09-08-enabling-ssl-for-apache-http-server/03-could-not-verify-this-certificate.png" width="500" title="信頼性を検証できない証明書" ></p>

<h2>参考</h2>

<ul>
<li><a href="https://www.verisign.co.jp/ssl/pdf/baseline_requirements1.0_jp.pdf">CA/ブラウザフォーラム パブリック証明書の発行および管理に関する基本要件v.1.0 | www.verisign.co.jp</a></li>
<li><a href="https://jp.globalsign.com/repository/baseline_requirements_ja.pdf">CA/ブラウザフォーラム パブリック証明書発行及びマネジメントの基本要件 ver1.0 | jp.globalsign.com</a></li>
<li><a href="http://httpd.apache.org/docs/2.2/mod/mod_ssl.html">mod_ssl &ndash; Apache HTTP Server</a></li>
<li><a href="http://www.openssl.org/docs/">OpenSSL: Documents, Misc</a></li>
<li><a href="http://x68000.q-e-d.net/~68user/unix/pickup?openssl">UNIXの部屋 コマンド検索:openssl (*BSD/Linux)</a></li>
<li><a href="https://support.mozilla.org/ja/kb/Secure%20Connection%20Failed">安全な接続ができませんでした | Firefox ヘルプ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSLを使用してファイルをRSA暗号化する]]></title>
    <link href="http://momoto.github.io/blog/2012/10/14/rsa-encryption-and-decryption/"/>
    <updated>2012-10-14T17:45:00+09:00</updated>
    <id>http://momoto.github.io/blog/2012/10/14/rsa-encryption-and-decryption</id>
    <content type="html"><![CDATA[<p>OpenSSLは様々な暗号方式での暗号化、復号化をサポートするセキュリティライブラリ。
使用できる暗号方式は<code>openssl ciphers</code>で確認できる。</p>

<p>RSA暗号方式の暗号化、復号、署名、検証を利用する場合は<code>openssl rsautl</code>を使う。</p>

<!-- more -->


<h3>暗号化</h3>

<p>ファイルをRSA暗号方式で暗号化するには、秘密鍵または公開鍵のいずれかが必要。</p>

<h4>ファイル<em>&ldquo;plain.txt&rdquo;</em>を、秘密鍵<em>&ldquo;private_key&rdquo;</em>を使用して暗号化する</h4>

<pre><code>$ openssl rsautl -encrypt -inkey private_key -in plain.txt -out encrypted
Enter pass phrase for private_key:
</code></pre>

<p>秘密鍵にパスフレーズが設定されていれば入力が必要。</p>

<h4>ファイル<em>&ldquo;plain.txt&rdquo;</em>を、公開鍵<em>&ldquo;public_key&rdquo;</em>を使用して暗号化する</h4>

<pre><code>$ openssl rsautl -encrypt -pubin -inkey public_key -in plain.txt -out encrypted
</code></pre>

<p><em>-pubin</em>のオプションを加えることに注意。</p>

<p>上のコマンドで暗号化した場合、<em>encrypted</em>という名前でバイナリファイルとして出力される。
使用できる公開鍵は下のような形式になる。</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM2twTjVLOYMK2Y7uKQ03CeSc8B+0GjJ
xy0ir28fIfGb523ogDyWKDjMDx5pTBUpOgDYUgSpP/I6SzER1ArhcnMCAwEAAQ==
-----END PUBLIC KEY-----
</code></pre>

<p><code>unable to load Public Key</code>とエラーが出る場合は、鍵の形式が無効。</p>

<h3>復号</h3>

<p>暗号化されたファイルを復号するには、秘密鍵が必要。</p>

<h4>暗号化されたファイル<em>&ldquo;encrypted&rdquo;</em>を、秘密鍵<em>&ldquo;private_key&rdquo;</em>を使用して復号する</h4>

<pre><code>$ openssl rsautl -decrypt -inkey private_key -in encrypted -out decrypted.txt
Enter pass phrase for private_key:
</code></pre>

<p>復号に成功すると、<em>&ldquo;decrypted.txt&rdquo;</em>にその内容が出力される。</p>
]]></content>
  </entry>
  
</feed>
